apply plugin: 'maven-publish'
apply plugin: 'com.kezong.fat-aar'
apply plugin: 'signing'

group 'com.seantone.xsdk'
version '1.0.1'
//def artifactId = "alipay"

// 是否 Release 发布（根据是否包含 SNAPSHOT 判断）
def isReleaseBuild() {
    return "$project.version".contains("SNAPSHOT") == false
}

// Central Repository: https://central.sonatype.org/publish/publish-guide/
// Release 仓库地址（默认先发布到 staging 暂存库，需要手动发布到中央仓库）
def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
}

// Snapshot 仓库地址
def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL : "https://s01.oss.sonatype.org/content/repositories/snapshots/"
}

// 仓库账号
def getRepositoryUsername() {
    return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
}

// 仓库密码
def getRepositoryPassword() {
    return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
}


task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

publishing {
    publications {
        Production(MavenPublication) {
            // 使用方引用 implementation 'cn.com.jack:mavendemo:2.7.0-SNAPSHOT'
            groupId = "$project.group"
//            artifactId = "$artifactId"
            version = "$project.version"

            project.ext["signing.keyId"] =  SNAPSHOT_SIGN_KEYID    //GPG指纹后8位
            project.ext["signing.password"] = SNAPSHOT_SIGN_PASSWORD  //GPG密码
            project.ext["signing.secretKeyRingFile"] = SNAPSHOT_SIGN_KEY_FILE //GPG私钥

            // 依赖 bundleReleaseAar 任务，并上传其产出的aar
            afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }
            // 也可以指定上传的AAR包，但是需要先手动生成aar
            // artifact("$buildDir/outputs/aar/${project.getName()}-debug.aar")
            // 上传source，这样使用放可以看到方法注释
            artifact generateSourcesJar

            pom {
                name = "$project.name"
                description = "$project.name library for xsdk"
                url = 'https://github.com/yuangu/xsdk'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'yuangu'
                        name = 'yuangu'
                        email = 'seantone@126.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com:yuangu/xsdk.git'
                    developerConnection = 'scm:git:ssh://github.com:yuangu/xsdk.git'
                    url = 'https://github.com/yuangu/xsdk'
                }
            }

            // pom文件中声明依赖，从而传递到使用方
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    // 避免出现空节点或 artifactId=unspecified 的节点
                    if (it.group != null && (it.name != null && "unspecified" != it.name) && it.version != null) {
                        println it.toString()
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'implementation')
                    }
                }
            }
        }
    }

    repositories {
        // 定义一个 maven 仓库
        maven {
            url = isReleaseBuild() ? getReleaseRepositoryUrl():getSnapshotRepositoryUrl()
            // 仓库用户名密码
            credentials {
                username = getRepositoryUsername()
                password = getRepositoryPassword()
            }
        }
    }
}

project.signing {
    sign project.publishing.publications
}

task publishToMaven(dependsOn: ['assemble', 'publish']) {
    doLast {
        println "finish publish to maven"
    }
}